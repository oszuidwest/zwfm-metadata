name: Build and Publish Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      use_latest_tag:
        description: 'Build from latest Git tag instead of main branch'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag (for manual builds)
        if: github.event_name == 'workflow_dispatch' && inputs.use_latest_tag
        id: get-tag
        run: |
          # Get the most recent tag
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$TAG" ]; then
            # Strip v prefix for Docker tags
            DOCKER_TAG="${TAG#v}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
            echo "Found latest tag: $TAG (Docker: $DOCKER_TAG)"
            
            # Parse version components for manual builds
            if [[ $DOCKER_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              echo "major=$MAJOR" >> $GITHUB_OUTPUT
              echo "minor=$MINOR" >> $GITHUB_OUTPUT
              echo "patch=$PATCH" >> $GITHUB_OUTPUT
              echo "Parsed version: $MAJOR.$MINOR.$PATCH"
            else
              echo "Could not parse version from $DOCKER_TAG"
            fi
            
            # Set ref for metadata action
            echo "GITHUB_REF=refs/tags/$TAG" >> $GITHUB_ENV
          else
            echo "No tags found, using main branch"
            echo "tag=" >> $GITHUB_OUTPUT
            echo "docker_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Checkout tag (for manual builds with tag)
        if: github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.get-tag.outputs.tag != ''
        run: |
          git checkout ${{ steps.get-tag.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For tag pushes: Docker tags without v prefix (1.2.3) from Git tags (v1.2.3)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-') }}
            
            # For manual builds with latest tag - explicit version tags
            type=raw,value=${{ steps.get-tag.outputs.docker_tag }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.get-tag.outputs.docker_tag != '' }}
            type=raw,value=${{ steps.get-tag.outputs.major }}.${{ steps.get-tag.outputs.minor }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.get-tag.outputs.major != '' }}
            type=raw,value=${{ steps.get-tag.outputs.major }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.get-tag.outputs.major != '' }}
            type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.get-tag.outputs.tag != '' && !contains(steps.get-tag.outputs.tag, '-') }}
            
            # For manual builds without tag (edge)
            type=raw,value=edge,enable=${{ github.event_name == 'workflow_dispatch' && (!inputs.use_latest_tag || steps.get-tag.outputs.tag == '') }}
          labels: |
            org.opencontainers.image.title=ZuidWest FM Metadata
            org.opencontainers.image.description=Metadata handling middleware for ZuidWest FM
            org.opencontainers.image.vendor=Streekomroep ZuidWest
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1