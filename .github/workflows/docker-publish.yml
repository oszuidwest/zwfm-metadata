name: Build and Publish Docker Image

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      use_latest_tag:
        description: 'Build from latest Git tag instead of main branch'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version from tag or latest
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION=${{ github.ref_name }}
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION="edge-$(git rev-parse --short HEAD)"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.use_latest_tag }}" = "true" ]; then
            # Get the most recent tag
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$VERSION" ]; then
              echo "No tags found, using edge build"
              VERSION="edge-$(git rev-parse --short HEAD)"
            else
              # Set ref for metadata action
              echo "GITHUB_REF=refs/tags/$VERSION" >> $GITHUB_ENV
            fi
          else
            VERSION="edge-$(git rev-parse --short HEAD)"
          fi
          
          # Set outputs
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Create Docker-compatible version (without 'v' prefix)
          if [[ "$VERSION" =~ ^v[0-9] ]]; then
            DOCKER_TAG="${VERSION#v}"
          else
            DOCKER_TAG="$VERSION"
          fi
          echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          
          # Parse semantic version components if applicable
          if [[ $DOCKER_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "major=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "minor=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "patch=${BASH_REMATCH[3]}" >> $GITHUB_OUTPUT
            echo "is_semver=true" >> $GITHUB_OUTPUT
          else
            echo "is_semver=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Version: ${VERSION} (Docker: ${DOCKER_TAG})"

      - name: Checkout tag (for manual builds with tag)
        if: github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.version.outputs.version != 'edge'
        run: |
          git checkout ${{ steps.version.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For tag pushes: Docker tags without v prefix (1.2.3) from Git tags (v1.2.3)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-') }}
            
            # For main branch pushes - edge tag
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' }}
            
            # For manual builds with latest tag - explicit version tags
            type=raw,value=${{ steps.version.outputs.docker_tag }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.version.outputs.is_semver == 'true' }}
            type=raw,value=${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.version.outputs.is_semver == 'true' }}
            type=raw,value=${{ steps.version.outputs.major }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.version.outputs.is_semver == 'true' }}
            type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' && inputs.use_latest_tag && steps.version.outputs.is_semver == 'true' }}
            
            # For manual builds without tag (edge)
            type=raw,value=edge,enable=${{ github.event_name == 'workflow_dispatch' && (!inputs.use_latest_tag || steps.version.outputs.version == 'edge') }}
          labels: |
            org.opencontainers.image.title=ZuidWest FM Metadata
            org.opencontainers.image.description=Metadata handling middleware for ZuidWest FM
            org.opencontainers.image.vendor=Streekomroep ZuidWest
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.version.outputs.version }}
            COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.event.repository.updated_at }}