name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version without v prefix (e.g., 1.0.0) or "edge" for development build'
        required: true
        default: '1.0.0'

env:
  GO_VERSION: '1.24'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.version }}" == "edge" ]]; then
            echo "version=edge" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          else
            TAG="v${{ inputs.version }}"
            echo "version=$TAG" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Test
        run: |
          go mod download
          go test -v ./...
          go vet ./...

      - name: Build all platforms
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" == "edge" ]]; then
            VERSION="edge-$(git rev-parse --short HEAD)"
          fi
          LDFLAGS="-w -s -X zwfm-metadata/utils.Version=$VERSION -X zwfm-metadata/utils.Commit=${{ github.sha }} -X zwfm-metadata/utils.BuildTime=$(date -u +%FT%TZ)"
          
          # Function to build
          build() {
            local os=$1 arch=$2 arm=$3
            local output="zwfm-metadata-${os}-${arch}${arm:+v$arm}"
            [[ "$os" == "windows" ]] && output+=".exe"
            
            echo "Building $output"
            if [ -n "$arm" ]; then
              GOOS=$os GOARCH=$arch GOARM=$arm CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o "dist/$output"
            else
              GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o "dist/$output"
            fi
          }
          
          mkdir -p dist
          
          # Build matrix
          build linux amd64
          build linux arm64
          build linux arm 7
          build windows amd64
          build windows arm64
          build darwin amd64
          build darwin arm64

      - name: Create release
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: |
            **Docker**: `docker pull ghcr.io/oszuidwest/zwfm-metadata:${{ steps.version.outputs.version }}`
            
            Binary downloads are available below as release assets.
          files: dist/*
          generate_release_notes: true

      - name: Upload edge artifacts
        if: steps.version.outputs.is_release == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: edge-${{ github.sha }}
          path: dist/*
          retention-days: 7

  docker:
    needs: release
    if: needs.release.outputs.version && needs.release.result == 'success'
    uses: ./.github/workflows/docker-publish.yml
    with:
      version: ${{ needs.release.outputs.version }}
    permissions:
      contents: read
      packages: write

