name: Build and Release binaries

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a release after building'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version (without v prefix, e.g., 1.0.0)'
        required: false
        default: '1.0.0'
        type: string
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'zwfm-metadata'

jobs:
  ##################################
  # Build Jobs
  ##################################
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm
            goarm: 7
            runner: ubuntu-latest
          
          # Windows builds
          - goos: windows
            goarch: amd64
            runner: ubuntu-latest
            ext: .exe
          - goos: windows
            goarch: arm64
            runner: ubuntu-latest
            ext: .exe
          
          # macOS builds
          - goos: darwin
            goarch: amd64
            runner: ubuntu-latest
          - goos: darwin
            goarch: arm64
            runner: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Tidy dependencies
        run: go mod tidy

      - name: Get dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: go test -v ./...

      - name: Run vet
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: go vet ./...

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag (remove refs/tags/ prefix)
            VERSION="${{ github.ref_name }}"
            DISPLAY_VERSION="${VERSION#v}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="v${{ inputs.version }}"
            DISPLAY_VERSION="${{ inputs.version }}"
          else
            VERSION="dev"
            DISPLAY_VERSION="dev"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "display_version=$DISPLAY_VERSION" >> $GITHUB_OUTPUT

      - name: Create output directory
        run: mkdir -p dist

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          if [ "${{ matrix.goarm }}" != "" ]; then
            BINARY_NAME="${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}${{ matrix.ext }}"
          fi
          
          echo "Building $BINARY_NAME"
          go build -v \
            -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }} -X main.commit=${{ github.sha }}" \
            -o "dist/$BINARY_NAME" \
            .

      - name: Generate build info
        run: |
          cat > dist/build-info-${{ matrix.goos }}-${{ matrix.goarch }}.txt << EOF
          Build Information
          =================
          Project: ZWFM Metadata (ZuidWest FM)
          Binary: ${{ env.PROJECT_NAME }}
          Version: ${{ steps.version.outputs.version }}
          Commit: ${{ github.sha }}
          OS: ${{ matrix.goos }}
          Architecture: ${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          Go Version: ${{ env.GO_VERSION }}
          Built on: $(date -u)
          Built by: GitHub Actions
          
          Description: Metadata handling middleware for ZuidWest FM
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          path: |
            dist/${{ env.PROJECT_NAME }}-*
            dist/build-info-*
          retention-days: 90

  ##################################
  # Release Job
  ##################################
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.release) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version and tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release - create tag
            VERSION="${{ inputs.version }}"
            TAG="v${VERSION}"
            DISPLAY_VERSION="${VERSION#v}"
            echo "create_tag=true" >> $GITHUB_OUTPUT
          else
            # Tag push - use existing tag
            TAG="${{ github.ref_name }}"
            VERSION="${TAG}"
            DISPLAY_VERSION="${TAG#v}"
            echo "create_tag=false" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "display_version=$DISPLAY_VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists (for manual releases)
        if: steps.version.outputs.create_tag == 'true'
        id: check-tag
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.version.outputs.tag }} already exists."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.version.outputs.tag }} does not exist."
          fi

      - name: Create and push tag (for manual releases)
        if: steps.version.outputs.create_tag == 'true' && steps.check-tag.outputs.exists == 'false'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          echo "Creating tag ${{ steps.version.outputs.tag }}..."
          git tag "${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"
          echo "Tag pushed successfully. This will trigger the Docker build workflow."

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "${{ env.PROJECT_NAME }}-*" -type f | while read file; do
            cp "$file" release/
          done
          ls -la release/

      - name: Generate release body
        id: release-body
        run: |
          cat > release_body.md << 'EOF'
          ## ZuidWest FM Metadata ${{ steps.version.outputs.display_version }}
          
          ### 📦 Binary Downloads
          Download the appropriate binary for your system:
          
          - **Linux AMD64**: `zwfm-metadata-linux-amd64`
          - **Linux ARM64**: `zwfm-metadata-linux-arm64`
          - **Linux ARM v7**: `zwfm-metadata-linux-armv7`
          - **Windows AMD64**: `zwfm-metadata-windows-amd64.exe`
          - **Windows ARM64**: `zwfm-metadata-windows-arm64.exe`
          - **macOS Intel**: `zwfm-metadata-darwin-amd64`
          - **macOS Apple Silicon**: `zwfm-metadata-darwin-arm64`
          
          ### 🐳 Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.display_version }}
          docker pull ghcr.io/${{ github.repository }}:latest
          ```
          
          ### 📖 Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}#installation)
          - [Configuration Documentation](https://github.com/${{ github.repository }}#configuration)
          - [Docker Usage](https://github.com/${{ github.repository }}#docker-usage)
          
          ### ℹ️ Build Information
          - **Go Version**: ${{ env.GO_VERSION }}
          - **Commit**: ${{ github.sha }}
          - **Built by**: GitHub Actions
          
          ---
          
          **Note**: Docker images are automatically built and published to GitHub Container Registry.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "${{ steps.version.outputs.display_version }}"
          body_path: release_body.md
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}